[project]
name = "your-project-name"
version = "0.2.1"
description = "A brief description of your project."
readme = "README.md"
requires-python = ">=3.9" # Package supports Python 3.9+; template dev env targets 3.11.
license = { file = "LICENSE.md" }
authors = [
  { name = "Your Name", email = "you@example.com" }, 
]
dependencies = [
  "fastapi",
  "uvicorn[standard]",
  "pydantic",
  "pydantic-settings", 
  "typer==0.12.3", 
  "click==8.1.7", 
  "httpx>=0.23.0,<1.0.0"
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "commitizen>=3.0,<4.0", 
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "codecov>=2.1,<3.0", # ADDED for uploading coverage reports
]
lint = [
    "ruff>=0.4.0,<0.5.0", 
    "bandit>=1.7.5",  
    "safety>=2.3.5",  
    "mypy>=1.10.0,<1.11.0", 
    "pydantic>=2.0.0,<3.0.0", 
    "pip-audit>=2.7", 
]

[project.urls]
Homepage = "https://github.com/your-username/your_core_library"
Documentation = "https://your-docs-url.com" 
Repository = "https://github.com/your-username/your_core_library"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/your_core_library"]

[tool.ruff]
# Same as Black.
line-length = 88
# Assume Python 3.11+ features when formatting.
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (F), pycodestyle (E, W), isort (I), and flake8-bugbear (B).
# Add others as desired, e.g., C90 (McCabe complexity), N (pep8-naming), UP (pyupgrade), S (flake8-bandit subset).
select = ["E", "F", "W", "I", "B"]
ignore = [
    "E203", # Whitespace before ':', conflicts with black
    "E501", # Line too long, handled by ruff format or black
]
# Allow autofix for all enabled rules (when `--fix` is used).
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
# Ensures isort compatibility with black
force-single-line = true

[tool.ruff.format]
# Use double quotes for strings where possible.
quote-style = "double"
# Indent with spaces, 4 per level.
indent-style = "space"
# Like Black, use a trailing comma after the last argument in a multi-line hug, call or definition.
skip-magic-trailing-comma = false

[tool.coverage.run]
branch = true
source = [
    "src/your_core_library", # Source for core library
    "examples"               # Source for all examples
]
relative_files = true
omit = [
    "*/__main__.py", # Typically not tested
]

[tool.coverage.report]
fail_under = 80 
show_missing = true

[tool.coverage.xml] 
output = "coverage.xml"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov --cov-report=xml --cov-report=term-missing --cov-fail-under=80"
testpaths = [
    "tests/your_core_library", # Tests for the core library
    "tests/examples/web",      # Tests for the FastAPI web example
    "tests/examples/cli",      # Tests for the Typer CLI example
    "tests/examples/data_pipeline" # Tests for the data pipeline example
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
pythonpath = ["."]  # ADDED: Ensure project root is in sys.path for pytest

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.2.1" # Must match [project.version]
version_files = [
    "pyproject.toml:^version", # Path to version in pyproject.toml
    # "src/your_core_library/__init__.py:^__version__" # Uncomment if you have version here too
]
tag_format = "$version"
bump_message = "chore(release): bump version to $current_version â†’ $new_version"
changelog_file = "CHANGELOG.md"
changelog_incremental = true
changelog_start_rev = "0.1.0"
update_changelog_on_bump = true
major_version_zero = true # Allows 0.x.y versions to have breaking changes (0.y.z)

# If you want to customize commit types, uncomment and modify:
# types = [
#   { "value": "feat", "name": "feat:     A new feature" },
#   { "value": "fix", "name": "fix:      A bug fix" },
#   { "value": "docs", "name": "docs:     Documentation only changes" },
#   { "value": "style", "name": "style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)" },
#   { "value": "refactor", "name": "refactor: A code change that neither fixes a bug nor adds a feature" },
#   { "value": "perf", "name": "perf:     A code change that improves performance" },
#   { "value": "test", "name": "test:     Adding missing tests or correcting existing tests" },
#   { "value": "build", "name": "build:    Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)" },
#   { "value": "ci", "name": "ci:       Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)" },
#   { "value": "chore", "name": "chore:    Other changes that don't modify src or test files" },
#   { "value": "revert", "name": "revert:   Reverts a previous commit" }
# ]