[project]
name = "your-project-name"
version = "0.3.2"
description = "A brief description of your project."
readme = "README.md"
requires-python = ">=3.10" # Package supports Python 3.10+; template dev env targets 3.11.
license = { file = "LICENSE.md" }
authors = [
  { name = "Your Name", email = "you@example.com" },
]
dependencies = [
  "fastapi",
  "uvicorn[standard]",
  "pydantic",
  "pydantic-settings",
  "typer==0.12.3",
  "click==8.1.7",
  "httpx>=0.23.0,<1.0.0"
]

[project.optional-dependencies]
dev = [
    "pre-commit>=3.3.3,<4.0.0",       # For managing and maintaining pre-commit hooks
    "commitizen>=3.5.2,<4.0.0",       # For conventional commits and version bumping
]
docs = [
    "mkdocs>=1.5.0,<2.0.0",
    "mkdocs-material>=9.0.0,<10.0.0",
    "mkdocs-mermaid2-plugin",
]
test = [
    "pytest>=7.0,<8.0",
    "pytest-cov>=4.0,<5.0",
    "codecov>=2.1,<3.0",
]
lint = [
    "ruff>=0.11.9",
    "bandit>=1.7.5,<2.0.0",
    "mypy>=1.10.0,<1.11.0",
    "pydantic>=2.0.0,<3.0.0",
    "pip-audit>=2.7,<3.0",
]

[project.urls]
Homepage = "https://github.com/your-username/your_core_library"
Documentation = "https://your-docs-url.com"
Repository = "https://github.com/your-username/your_core_library"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/your_core_library"]

[tool.ruff]
# Same as Black.
line-length = 88
# Assume Python 3.11+ features when formatting.
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (F), pycodestyle (E, W), isort (I), and flake8-bugbear (B).
# Add others as desired, e.g., C90 (McCabe complexity), N (pep8-naming), UP (pyupgrade), S (flake8-bandit subset).
select = ["E", "F", "W", "I", "B"]
ignore = [
    "E203", # Whitespace before ':', conflicts with black
    "E501", # Line too long, handled by ruff format or black
]
# Allow autofix for all enabled rules (when `--fix` is used).
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
# Ensures isort compatibility with black
force-single-line = true

[tool.ruff.format]
# Use double quotes for strings where possible.
quote-style = "double"
# Indent with spaces, 4 per level.
indent-style = "space"
# Like Black, use a trailing comma after the last argument in a multi-line hug, call or definition.
skip-magic-trailing-comma = false

[tool.coverage.run]
branch = true
source = [
    "src/your_core_library", # Source for core library
    "examples"               # Source for all examples
]
relative_files = true
omit = [
    "*/__main__.py", # Typically not tested
]

[tool.coverage.report]
fail_under = 80
show_missing = true

[tool.coverage.xml]
output = "coverage.xml"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov --cov-report=xml --cov-report=term-missing --cov-fail-under=80"
testpaths = [
    "tests/your_core_library", # Tests for the core library
    "tests/examples/web",      # Tests for the FastAPI web example
    "tests/examples/cli",      # Tests for the Typer CLI example
    "tests/examples/data_pipeline" # Tests for the data pipeline example
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
pythonpath = ["."]  # ADDED: Ensure project root is in sys.path for pytest

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.3.3" # Must match [project.version]
version_files = [
    "pyproject.toml:project.version",      # For [project] version = "x.y.z"
    "pyproject.toml:tool.commitizen.version" # For [tool.commitizen] version = "x.y.z"
    # "src/your_core_library/__init__.py:^__version__" # Uncomment if you have version here too
]
tag_format = "$version"
bump_message = "chore(release): bump version to $current_version â†’ $new_version"
changelog_file = "CHANGELOG.md"
changelog_incremental = true
changelog_start_rev = "0.1.0"
update_changelog_on_bump = true
major_version_zero = true # Allows 0.x.y versions to have breaking changes (0.y.z)

[tool.commitizen.customize]
message_template = """
{{change_type}}{% if scope %}({{scope}}){% endif %}{% if is_breaking_change %}!{% endif %}: {{subject}}
{% if body %}\n\n{{body}}{% endif %}
{% if is_breaking_change %}\n\nBREAKING CHANGE: {{breaking_change}}{% endif %}
{% if issues_closed %}\n\nCloses {{issues_closed}}{% endif %}
"""

bump_map = { "feat" = "MINOR", "fix" = "PATCH", "docs" = "PATCH", "style" = "PATCH", "refactor" = "PATCH", "perf" = "PATCH", "test" = "PATCH", "build" = "PATCH", "ci" = "PATCH" }

change_type_map = { "feat" = "Features", "fix" = "Bug Fixes", "perf" = "Performance Improvements", "docs" = "Documentation", "style" = "Styles", "refactor" = "Code Refactoring", "test" = "Tests", "build" = "Build System", "ci" = "Continuous Integration" }

questions = [
  { type = "list", name = "change_type", message = "Select the type of change you are committing:", choices = [{ value = "feat", name = "feat:     A new feature" }, { value = "fix", name = "fix:      A bug fix" }, { value = "docs", name = "docs:     Documentation only changes (e.g., README, mkdocs)" }, { value = "style", name = "style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)" }, { value = "refactor", name = "refactor: A code change that neither fixes a bug nor adds a feature" }, { value = "perf", name = "perf:     A code change that improves performance" }, { value = "test", name = "test:     Adding missing tests or correcting existing tests" }, { value = "build", name = "build:    Changes that affect the build system or external dependencies (e.g., pyproject.toml, uv, Dockerfile, Taskfile)" }, { value = "ci", name = "ci:       Changes to our CI configuration files and scripts (e.g., GitHub Actions workflows)" }]},
  { type = "input", name = "scope", message = "What is the scope of this change (e.g., core-lib, web-example, cli-example, data-pipeline, docs, ci, taskfile, deps)? (press enter to skip)\n"},
  { type = "input", name = "subject", message = "Write a short, imperative tense description of the change (max 72 chars):\n"},
  { type = "input", name = "body", message = "Provide a longer description of the change (motivation, context, approach): (press enter to skip)\n"},
  { type = "confirm", name = "is_breaking_change", message = "Are there any breaking changes?", default = false},
  { type = "input", name = "issues_closed", message = "Issue(s) closed (e.g., #123, #456): (press enter to skip)\n"}
]

[tool.bandit]
# Exclude paths from scanning (e.g., test directories, virtual environments)
exclude_dirs = ["tests", ".venv", "venv", "ENV", "env", "build", "dist"]

# Skip specific test IDs if they are known to be false positives for your project
# Example: skips = ["B101"] # Skip assert_used check if it's not relevant
# You can also specify severity and confidence levels here if needed for Bandit's CLI

[tool.mypy]
mypy_path = "src"
explicit_package_bases = true # IMPORTANT for src layout and to avoid 'found twice' errors
# We can add more specific Mypy settings here later if needed,
# e.g., ignore_missing_imports_per_module = true for specific problematic libs,
# or disallow_untyped_defs = true if you want to enforce return types gradually.
