version: '3'

vars:
  PROJECT_DIR: '{{.USER_WORKING_DIR}}'
  PYTHON_VERSION: "3.11" # Ensure this matches your project's Python version
  VENV_DIR: .venv
  PYTHON: "{{.VENV_DIR}}/bin/python"
  PRECOMMIT: "{{.VENV_DIR}}/bin/pre-commit"
  COMMITIZEN: "{{.VENV_DIR}}/bin/cz" # For commitizen tool
  GIT_CZ: "{{.VENV_DIR}}/bin/git-cz" # For git-cz alias often used with commitizen
  PYTEST: "{{.VENV_DIR}}/bin/pytest"
  RUFF: "{{.VENV_DIR}}/bin/ruff"
  BANDIT: "{{.VENV_DIR}}/bin/bandit"
  MKDOCS: "{{.VENV_DIR}}/bin/mkdocs"
  IMAGE_NAME_LOCAL: "your-app-image" # Default image name
  TAG: "latest"                 # Default tag
  PIP_AUDIT_OUTPUT_FORMAT: '{{default "columns" .PIP_AUDIT_OUTPUT_FORMAT}}'
  APP_PORT: '{{default "8000" .APP_PORT}}'
  CLI_ARGS: '{{default "" .CLI_ARGS}}'

tasks:
  default:
    desc: "Lists all available tasks."
    cmds:
      - task --list
    silent: true

  # --------------------------------------------------------------------------->
  # Setup & Installation
  # --------------------------------------------------------------------------->
  setup:env:
    desc: "Ensures a virtual environment exists using uv if it doesn't exist."
    cmds:
      - cmd: |
          if [ ! -f "{{.VENV_DIR}}/pyvenv.cfg" ]; then
            echo "Virtual environment {{.VENV_DIR}}/pyvenv.cfg not found. Creating/Recreating virtual environment..."
            uv venv {{.VENV_DIR}} --python {{.PYTHON_VERSION}}
            touch "{{.VENV_DIR}}/.did_create_env"
          fi
    silent: true

  setup:deps:
    desc: "Installs project dependencies and dev tools using uv if not already marked as installed."
    deps:
      - setup:env
    sources:
      - "pyproject.toml"
      - "requirements.lock"
    cmds:
      - cmd: |
          if [ ! -f "{{.VENV_DIR}}/.deps_installed" ] || [ "pyproject.toml" -nt "{{.VENV_DIR}}/.deps_installed" ] || [ "requirements.lock" -nt "{{.VENV_DIR}}/.deps_installed" ]; then
            echo "Dependencies marker '{{.VENV_DIR}}/.deps_installed' not found or outdated. Installing/Updating dependencies..."
            uv pip install -e .[dev,docs,test,lint] --python {{.PYTHON}}
            touch "{{.VENV_DIR}}/.deps_installed"
            touch "{{.VENV_DIR}}/.did_install_deps"
          fi
    silent: true

  setup:
    desc: "Full project setup: venv, dependencies, and pre-commit hooks."
    cmds:
      - task: setup:env
      - task: setup:deps
      - task: precommit:install
      - cmd: |
          DID_WORK=false
          MSG_NO_CHANGES="Virtual environment found in '{{.VENV_DIR}}'. No changes to project setup required."
          MSG_CHANGES_MADE="Project setup complete. Virtual environment in '{{.VENV_DIR}}' and pre-commit hooks installed."

          if [ -f "{{.VENV_DIR}}/.did_create_env" ] || [ -f "{{.VENV_DIR}}/.did_install_deps" ] || [ -f "{{.VENV_DIR}}/.did_install_hooks" ]; then
            DID_WORK=true
          fi

          rm -f "{{.VENV_DIR}}/.did_create_env" "{{.VENV_DIR}}/.did_install_deps" "{{.VENV_DIR}}/.did_install_hooks"

          if [ "$DID_WORK" = true ]; then
            echo "$MSG_CHANGES_MADE"
          else
            echo "$MSG_NO_CHANGES"
          fi
    silent: true

  lock:
    desc: "Generates requirements.lock from pyproject.toml using uv."
    deps:
      - setup:env
    sources: ["pyproject.toml"]
    generates: ["requirements.lock"]
    cmds:
      - "uv pip compile pyproject.toml --all-extras -o requirements.lock --python {{.PYTHON}}"
    silent: true

  # --------------------------------------------------------------------------->
  # Linting, Formatting & Security Checks
  # --------------------------------------------------------------------------->
  lint:
    desc: "Runs Ruff linter, Mypy, Bandit, and pip-audit checks."
    deps: [setup]
    method: checksum # More robust change detection for sources
    sources: ["src/**/*.py", "examples/**/*.py", "tests/**/*.py", "pyproject.toml", ".pre-commit-config.yaml", "Taskfile.yml"]
    cmds:
      - cmd: echo "== LINT TASK STARTED =="
      - cmd: echo "Step 1/4 - Running Ruff linter (checking formatting and lint rules)..."
      - cmd: "{{.RUFF}} check --fix src examples tests"
      - cmd: echo "Step 2/4 - Running Mypy static type checker..."
      - cmd: "{{.PYTHON}} -m mypy src examples tests"
      - cmd: echo "Step 3/4 - Running Bandit security linter..."
      - cmd: "{{.BANDIT}} -r src examples -ll -ii"
      - cmd: echo "Step 4/4 - Running pip-audit dependency vulnerability checker..."
      - cmd: "{{.VENV_DIR}}/bin/pip-audit --output {{.PIP_AUDIT_OUTPUT_FORMAT}}"
      - cmd: echo "== LINT TASK COMPLETED SUCCESSFULLY (all checks passed) =="
    silent: true

  typecheck:
    desc: "Runs Mypy static type checker."
    deps: [setup]
    sources: ["src/**/*.py", "examples/**/*.py", "tests/**/*.py", "pyproject.toml"]
    cmds:
      - "{{.PYTHON}} -m mypy src examples tests"
    silent: true

  format:
    desc: "Formats code using Ruff (Black-compatible formatter and import sorter)."
    deps: [setup]
    sources: ["src/**/*.py", "examples/**/*.py", "tests/**/*.py", "pyproject.toml", ".pre-commit-config.yaml", "Taskfile.yml"]
    cmds:
      - echo "Formatting with Ruff (formatter)..."
      - "{{.RUFF}} format src examples tests"
      - echo "\\nFormatting with Ruff (import sorter)..."
      - "{{.RUFF}} check --select I --fix src examples tests"
    silent: true

  # --------------------------------------------------------------------------->
  # Testing & Coverage
  # --------------------------------------------------------------------------->
  test:
    desc: "Runs tests with pytest and generates configured coverage reports (term-missing, xml)." # From user's list
    deps: [setup]
    sources: ["src/**/*.py", "examples/**/*.py", "tests/**/*.py", "pyproject.toml"]
    cmds:
      - "{{.PYTEST}}" # pytest will use pyproject.toml for coverage config (including xml)
    silent: true

  coverage:
    desc: "Runs tests, shows terminal coverage, and generates an HTML report."
    deps: [setup]
    sources: ["src/**/*.py", "examples/**/*.py", "tests/**/*.py", "pyproject.toml"]
    cmds:
      - "{{.PYTEST}}" # Run tests which should also generate .coverage
      - echo "\\nGenerating HTML coverage report in 'htmlcov/'..."
      - "{{.PYTHON}} -m coverage html" # Generate HTML from .coverage
      - echo "HTML report generated. Open 'htmlcov/index.html' in your browser."
    silent: true

  # --------------------------------------------------------------------------->
  # Pre-commit Hooks
  # --------------------------------------------------------------------------->
  precommit:install:
    desc: "Installs pre-commit hooks, or confirms if already installed."
    deps:
      - setup:deps # Ensures dependencies (including pre-commit) are installed first
    cmds:
      - cmd: |
          if [ -f .git/hooks/pre-commit ]; then
            echo "Pre-commit hooks already installed."
          else
            echo "Installing pre-commit hooks..."
            {{.PRECOMMIT}} install
            echo "Pre-commit hooks installed successfully."
            touch "{{.VENV_DIR}}/.did_install_hooks"
          fi
    silent: true

  precommit:run:
    desc: "Runs all pre-commit hooks on all files."
    deps: [setup]
    cmds:
      - "{{.PRECOMMIT}} run --all-files"
    silent: true

  precommit:update:
    desc: "Updates pre-commit hooks to their latest versions defined in .pre-commit-config.yaml."
    deps: [setup]
    cmds:
      - "{{.PRECOMMIT}} autoupdate"
    silent: true

  # --------------------------------------------------------------------------->
  # Commitizen (Conventional Commits)
  # --------------------------------------------------------------------------->
  cz:
    desc: "Alias for 'task cz:commit'. Interactively create a commit message."
    cmds:
      - task: cz:commit
    silent: true

  cz:commit:
    desc: "Interactively create a commit message with Commitizen."
    deps: [setup] # Ensures commitizen is installed
    interactive: true # Attempt to force interactive mode
    cmds:
      - "{{.COMMITIZEN}} commit"
    silent: true

  cz:check:
    desc: "Check if a commit message (e.g., from .git/COMMIT_EDITMSG) follows Conventional Commits."
    deps: [setup]
    cmds:
      - "{{.COMMITIZEN}} check --commit-msg-file .git/COMMIT_EDITMSG"
    silent: true

  cz:bump:
    desc: "Interactively bump version and create tag (shows preview, asks for confirmation)."
    deps: [setup]
    interactive: true # Ensures 'read' in the script works
    cmds:
      - sh -c "./scripts/confirm_bump.sh {{.COMMITIZEN}}"
    silent: true

  cz:changelog:
    desc: "Generate a changelog from conventional commits (dry run by default). Use 'task cz:changelog -- --no-dry-run' to apply."
    deps: [setup]
    cmds:
      - "{{.COMMITIZEN}} changelog --dry-run {{.CLI_ARGS}}"
    vars:
      CLI_ARGS: "{{default \"\" .CLI_ARGS}}"
    silent: true

  # --------------------------------------------------------------------------->
  # Release Helper Tasks
  # --------------------------------------------------------------------------->
  release:push:
    desc: "Pushes the current branch and all tags to the default remote (origin). Run after 'cz:bump -- --no-dry-run'."
    cmds:
      - git push origin HEAD # Pushes the current branch to origin
      - git push origin --tags # Pushes all local tags to origin
    silent: true

  # --------------------------------------------------------------------------->
  # Running Examples
  # --------------------------------------------------------------------------->
  serve:web:
    desc: "Run the FastAPI example web server with uvicorn (hot-reloading)."
    deps: [setup]
    cmds:
      - "{{.VENV_DIR}}/bin/uvicorn examples.web.main:app --reload --host 0.0.0.0 --port {{.APP_PORT | default 8000}}"
    vars:
      APP_PORT: "{{.APP_PORT}}"

  run:cli:
    desc: "Run the Typer CLI example. Pass options after '--', e.g., task run:cli -- --name Cascade"
    cmds:
      - '{{.VENV_DIR}}/bin/python examples/cli.py {{.CLI_ARGS}}'
    vars:
      CLI_ARGS: "{{default \"\" .CLI_ARGS}}"

  run:pipeline:
    desc: "Run the example data pipeline script."
    cmds:
      - '{{.VENV_DIR}}/bin/python examples/data_pipeline.py'

  # --------------------------------------------------------------------------->
  # Docker & Docker Compose
  # --------------------------------------------------------------------------->
  docker:build:
    desc: "Builds the Docker image for the FastAPI web example (examples/web/) using the root Dockerfile."
    deps:
      - setup:env
    cmds:
      - docker build -t {{.IMAGE_NAME_LOCAL | default "your-app-image"}} .
    vars:
      IMAGE_NAME_LOCAL: "{{.IMAGE_NAME_LOCAL}}"

  docker:run:
    desc: "Runs the FastAPI web example (examples/web/) in a Docker container from the locally built image."
    deps:
      - docker:build
    cmds:
      - docker run -p {{.APP_PORT | default 8000}}:8000 {{.IMAGE_NAME_LOCAL | default "your-app-image"}}
    vars:
      APP_PORT: "{{.APP_PORT}}"
      IMAGE_NAME_LOCAL: "{{.IMAGE_NAME_LOCAL}}"

  # --------------------------------------------------------------------------->
  # Documentation (MkDocs)
  # --------------------------------------------------------------------------->
  docs:serve:
    desc: "Serves the documentation locally with MkDocs (hot-reloading)."
    deps: [setup]
    cmds:
      - "{{.MKDOCS}} serve -a localhost:8001" # Specify address to avoid port conflicts
    silent: true

  docs:build:
    desc: "Builds the static documentation site using MkDocs."
    deps: [setup]
    cmds:
      - "{{.MKDOCS}} build"
    silent: true

  # --------------------------------------------------------------------------->
  # Cleaning
  # --------------------------------------------------------------------------->
  clean:pycache:
    desc: "Removes Python __pycache__ directories and .pyc files."
    cmds:
      - find . -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete
    silent: true

  clean:pytest:
    desc: "Removes pytest cache (.pytest_cache) and coverage files (.coverage, coverage.xml, htmlcov)."
    cmds:
      - rm -rf .pytest_cache .coverage coverage.xml htmlcov
    silent: true

  clean:build:
    desc: "Removes build artifacts (build, dist, *.egg-info)."
    cmds:
      - rm -rf build dist *.egg-info src/*.egg-info
    silent: true

  clean:venv:
    desc: "Removes the virtual environment directory ({{.VENV_DIR}})."
    cmds:
      - |-
        echo Attempting to remove virtual environment at: {{.VENV_DIR}}
      - |-
        rm -rf "{{.VENV_DIR}}"
    silent: true

  clean:mkdocs:
    desc: "Removes MkDocs build artifacts (site directory)."
    cmds:
      - rm -rf site/
    silent: true

  clean:audit:
    desc: "Removes pip-audit report artifacts (columns, pip-audit-report.*)."
    cmds:
      - rm -f columns pip-audit-report.*
    silent: true

  clean:
    desc: "Runs all clean tasks to remove temporary files and artifacts."
    cmds:
      - task: clean:pycache
      - task: clean:pytest
      - task: clean:build
      - task: clean:mkdocs
      - task: clean:audit
      # Note: clean:venv is intentionally excluded from the main clean task
      # as it's more destructive. Run 'task clean:venv' explicitly if needed.
    silent: true

  # --------------------------------------------------------------------------->
  # Utility / Alias Tasks
  # --------------------------------------------------------------------------->
  init:
    desc: "Alias for 'task setup'. Initializes the project for development (includes pre-commit hook installation via setup)."
    cmds:
      - task: setup
    silent: true
